stages:
  - build
  - test
  - deploy

# Stage Build
build:
  stage: build
  image: node:18
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - dist/  # Assure que les fichiers construits sont disponibles pour les étapes suivantes

# Stage Test
test:
  stage: test
  image: node:18
  script:
    - npm install
    - npm test
  dependencies:
    - build  # Le job de test dépend du job de build pour utiliser les fichiers générés

# Stage Deploy
deploy:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:dind  # Docker-in-Docker pour exécuter des commandes Docker dans le job
  script:
    # Connexion à Docker Hub avec un mot de passe sécurisé
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    # Connexion au GitLab Registry
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    # Construction de l'image Docker
    - docker build -t $DOCKERHUB_USERNAME/my-react-app:latest .
    # Tag l'image pour Docker Hub et GitLab Registry
    - docker tag $DOCKERHUB_USERNAME/my-react-app:latest $DOCKERHUB_USERNAME/my-react-app:v3.0.0
    - docker tag $DOCKERHUB_USERNAME/my-react-app:latest $CI_REGISTRY_IMAGE:latest
    - docker tag $DOCKERHUB_USERNAME/my-react-app:latest $CI_REGISTRY_IMAGE:v3.0.0
    # Pousser l'image vers Docker Hub
    - docker push $DOCKERHUB_USERNAME/my-react-app:latest
    - docker push $DOCKERHUB_USERNAME/my-react-app:v3.0.0
    # Pousser l'image vers GitLab Registry
    - docker push $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:v3.0.0
  only:
    - main  # Le job se déclenche uniquement sur la branche main
  needs:
    - build  # Le job deploy dépend du job build pour utiliser les fichiers générés
